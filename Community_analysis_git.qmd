---
title: "Network analysis"
format:
  html:
    embed-resources: true
editor: visual
---

```{r}
#| label = "setup",
#| include = FALSE
knitr::opts_chunk$set(echo = TRUE)
```

### Community level reproductive success

escalamos variables con rescale. Eliminamos filas de sitios donde no hay informacion de mean reproductive success para analisis de exito reproductivo.

```{r loading}
#| warning: false
#| message: false
rm(list = ls(all.names = TRUE)) 
pacman::p_unload(pacman::p_loaded(), character.only = TRUE) 
pacman::p_load(tidyverse,here, patchwork, purrr, dplyr, lme4, carData,effects, easystats, lmertTest, performance,see,gridExtra,car, AICcmodavg, lattice,ggplot2,bipartite, glmmTMB, nlme, performance, cowplot, ggeffects, ggsci)


sitems <- read.csv("./data/useful/sitems_ntwfruits.csv")
sitems3 <- read.csv("./data/useful/sitems_ntwseeds.csv")

#villa.s <- sitems %>%
 # subset(Site_id == "Doñana" & Bosque == "Villamanrique Chaparral" & Year == "2021" & Periodo=="2")



sitems <- sitems %>%
  mutate(
    poll.sp = case_when(
      Site == "Gorbea" & Year == 2021 & Bosque == 3 & Periodo == 2 ~ 3,
      Site == "Gorbea" & Year == 2021 & Bosque == 4 & Periodo == 1 ~ 3,
    
      Site == "Gorbea" & Year == 2021 & Bosque == 5 & Periodo == 1 ~ 2,
     
      Site == "Gorbea" & Year == 2022 & Bosque == 5 & Periodo == 1 ~ 1,
      
      Site == "Gorbea" & Year == 2022 & Bosque == 4 & Periodo == 1 ~ 1,
      Site == "Doñana" & Year == 2021 & Bosque == "Pinar Hinojos" & Periodo == 3 ~ 5,
      Site == "Doñana" & Year == 2021 & Bosque == "Pinar Puebla" & Periodo == 8 ~ 2,
      Site == "Doñana" & Year == 2021 & Bosque == "Villamanrique Sur" & Periodo == 3 ~ 13 ,
      Site == "Doñana" & Year == 2021 & Bosque == "Villamanrique Sur" & Periodo == 7 ~ 4,
      Site == "Doñana" & Year == 2021 & Bosque == "Villamanrique Sur" & Periodo == 8 ~ 1,
      TRUE ~ poll.sp
    ),
    plant.sp = case_when(
       Site == "Gorbea" & Year == 2021 & Bosque == 3 & Periodo == 2 ~ 2,
      Site == "Gorbea" & Year == 2021 & Bosque == 4 & Periodo == 1 ~ 2,
    
      Site == "Gorbea" & Year == 2021 & Bosque == 5 & Periodo == 1 ~ 1,
     
      Site == "Gorbea" & Year == 2022 & Bosque == 5 & Periodo == 1 ~ 1,
      
      Site == "Gorbea" & Year == 2022 & Bosque == 4 & Periodo == 1 ~ 2,
       Site == "Doñana" & Year == 2021 & Bosque == "Pinar Hinojos" & Periodo == 3 ~ 1,
       Site == "Doñana" & Year == 2021 & Bosque == "Pinar Puebla" & Periodo == 8 ~ 2,
      Site == "Doñana" & Year == 2021 & Bosque == "Villamanrique Sur" & Periodo == 3 ~ 1,
      Site == "Doñana" & Year == 2021 & Bosque == "Villamanrique Sur" & Periodo == 7 ~ 1,
      Site == "Doñana" & Year == 2021 & Bosque == "Villamanrique Sur" & Periodo == 8 ~ 1,
      TRUE ~ plant.sp
    ))

sitems.fs <- sitems %>%
  group_by(Year, Bosque, Site, Periodo) %>%
  summarize(mean_fruitset = mean(fruit_set, na.rm = TRUE),
            se_fruitset = (sd(fruit_set, na.rm = TRUE))/sqrt(n()))

sitems3 <- sitems3 %>%
  mutate(
    poll.sp = case_when(
      Site == "Gorbea" & Year == 2021 & Bosque == 3 & Periodo == 2 ~ 3,
      Site == "Gorbea" & Year == 2021 & Bosque == 4 & Periodo == 1 ~ 3,
    
      Site == "Gorbea" & Year == 2021 & Bosque == 5 & Periodo == 1 ~ 2,
     
      Site == "Gorbea" & Year == 2022 & Bosque == 5 & Periodo == 1 ~ 1,
      
      Site == "Gorbea" & Year == 2022 & Bosque == 4 & Periodo == 1 ~ 1,
      Site == "Doñana" & Year == 2021 & Bosque == "Pinar Hinojos" & Periodo == 3 ~ 5,
      Site == "Doñana" & Year == 2021 & Bosque == "Pinar Puebla" & Periodo == 8 ~ 2,
      Site == "Doñana" & Year == 2021 & Bosque == "Villamanrique Sur" & Periodo == 3 ~ 13 ,
      Site == "Doñana" & Year == 2021 & Bosque == "Villamanrique Sur" & Periodo == 7 ~ 4,
      Site == "Doñana" & Year == 2021 & Bosque == "Villamanrique Sur" & Periodo == 8 ~ 1,
      TRUE ~ poll.sp
    ),
    plant.sp = case_when(
       Site == "Gorbea" & Year == 2021 & Bosque == 3 & Periodo == 2 ~ 2,
      Site == "Gorbea" & Year == 2021 & Bosque == 4 & Periodo == 1 ~ 2,
    
      Site == "Gorbea" & Year == 2021 & Bosque == 5 & Periodo == 1 ~ 1,
     
      Site == "Gorbea" & Year == 2022 & Bosque == 5 & Periodo == 1 ~ 1,
      
      Site == "Gorbea" & Year == 2022 & Bosque == 4 & Periodo == 1 ~ 2,
       Site == "Doñana" & Year == 2021 & Bosque == "Pinar Hinojos" & Periodo == 3 ~ 1,
       Site == "Doñana" & Year == 2021 & Bosque == "Pinar Puebla" & Periodo == 8 ~ 2,
      Site == "Doñana" & Year == 2021 & Bosque == "Villamanrique Sur" & Periodo == 3 ~ 1,
      Site == "Doñana" & Year == 2021 & Bosque == "Villamanrique Sur" & Periodo == 7 ~ 1,
      Site == "Doñana" & Year == 2021 & Bosque == "Villamanrique Sur" & Periodo == 8 ~ 1,
      TRUE ~ plant.sp
    ))

sitems <- sitems %>%
  group_by(Year, Bosque, Site, Periodo) %>%
  summarise(Anidamiento = unique(Anidamiento),
            poll.sp = unique(poll.sp),
            plant.sp = unique(plant.sp),
            total.visits = unique(total.visits),
            comp.fun.pol = unique (comp.fun.pol))

##plot riqueza
sitems_rich <- read.csv("data/SITE_network_level_metrics.csv", sep=",")


str(sitems_rich)

rich.g <- sitems_rich %>%
  filter(Site_id == "Gorbea")
rich.d <- sitems_rich %>%
  filter(Site_id == "Doñana")
m1 <- glmmTMB(poll.sp ~ Periodo +Year + (1|Bosque), data= rich.g, family="poisson")

m1.p <- glmmTMB(plant.sp ~ Periodo +Year + (1|Bosque), data= rich.g, family="poisson")
summary(m1)
summary(m2)
m3 <- glmmTMB(poll.sp ~ Periodo + I(Periodo^2) + Year + (1|Bosque), 
                        data = rich.g, 
                        family = "poisson")

m3.p <- glmmTMB(plant.sp ~ Periodo + I(Periodo^2) + Year + (1|Bosque), 
                        data = rich.g, 
                        family = "poisson")
library(splines)
m4 <- glmmTMB(poll.sp ~ ns(Periodo, df = 3) + Year+ (1|Bosque), 
              data = rich.g, 
              family = "poisson")
anova(m1,m3)
anova(m1.p,m3.p)
anova(m3,m4)
summary(m1)
##

m2 <- glmmTMB(poll.sp ~ Periodo + Year + (1|Bosque), data= rich.d, family="poisson")

m2.p <- glmmTMB(plant.sp ~ Periodo + Year + (1|Bosque), data= rich.d, family="poisson")
summary(m5.p)

m5 <- glmmTMB(poll.sp ~ Periodo + I(Periodo^2) + Year + (1|Bosque), 
              data = rich.d, 
              family = "poisson")
m5.p <- glmmTMB(plant.sp ~ Periodo + I(Periodo^2) + Year + (1|Bosque), 
              data = rich.d, 
              family = "poisson")

m6 <- glmmTMB(poll.sp ~ ns(Periodo, df = 3) + (1|Bosque), 
              data = rich.d, 
              family = "poisson")

anova(m2,m5)
anova(m2.p,m5.p)
anova(m5,m6)
summary(m2)
##para doñana mismo mas que se comporta disntito segun año

install.packages("modelsummary")
library(modelsummary)

models <- list(
  "Plant Richness (Gorbea)" = m1.p,
  "Pollinator Richness (Gorbea)" = m3,
  "Plant Richness (Doñana)" = m2.p,
  "Pollinator Richness (Doñana)" = m5
)

# Generar la tabla con modelsummary y formato gt
tab <- modelsummary::modelsummary(models,
                    output = "gt",
                    stars = TRUE,
                    gof_map = c("nobs", "logLik", "AIC", "BIC"))

install.packages("gt")
library(gt)
install.packages("webshot2")
library(webshot2)
webshot2::install_phantomjs()

gtsave(tab, filename = "Figs/richnes_model.png")
gtsave(tab, filename = "Figs/richness_models_summary.html")

  


install.packages("gtsummary")
library(gtsummary)

tabla <- tbl_merge(
  tbls = list(
    tbl_regression(m1, label = list(Periodo ~ "Periodo", Year ~ "Year"), intercept = TRUE) %>%
      add_n() %>%
      add_p(pattern = "{p.value}{stars}"),
    tbl_regression(m3, label = list(Periodo ~ "Periodo", Year ~ "Year"), intercept = TRUE) %>%
      add_n() %>%
      add_p(pattern = "{p.value}{stars}"),
    tbl_regression(m2, label = list(Periodo ~ "Periodo", Year ~ "Year"), intercept = TRUE) %>%
      add_n() %>%
      add_p(pattern = "{p.value}{stars}"),
    tbl_regression(m5, label = list(Periodo ~ "Periodo", Year ~ "Year"), intercept = TRUE) %>%
      add_n() %>%
      add_p(pattern = "{p.value}{stars}")
  ),
  tab_spanner = list(
    c("**Gorbea**" = 2),
    c("**Doñana**" = 2)
  )
)


sitems_riqueza <- sitems_rich %>%
  group_by(Site_id, Bosque, Year, Periodo) %>%
  summarise(
    mean_richness_plants = mean(plant.sp, na.rm = TRUE),
    mean_richness_pollinators = mean(poll.sp, na.rm = TRUE)
  )

library(ggsci)
variables <- list(
  plant = "mean_richness_plants",
  pollinator = "mean_richness_pollinators"
)

y_titles <- c("Plant Richness", "Pollinator Richness")

crear_grafico <- function(variable, title) {
  ggplot(sitems_riqueza, aes(x = Periodo, y = .data[[variable]], color = as.factor(Year), group = Year)) +
    geom_point(size = 2) +
    stat_summary(
      aes(group = Year, color = as.factor(Year)),
      fun = mean,
      geom = "point",
      shape = 21,
      size = 4,
      fill = "white",  # White fill for the mean points
      position = position_dodge(width = 0.2)
    ) +
    stat_summary(
      aes(group = Year, color = as.factor(Year)),
      fun = mean,
      geom = "line",
      size = 1,  
      linetype = "solid",  
      position = position_dodge(width = 0.2)
    ) +
    facet_wrap(~ Site_id) +
    scale_color_npg() +
    scale_x_continuous(breaks = 1:9) +
    labs(
      title = paste(title, "throughout time"),  # Use the custom title for the plot
      x = "Period",
      y = title,  # Set the Y-axis label to the custom title
      color = "Year"
    ) +
    theme_minimal() +
    theme(
      strip.text = element_text(size = 10, face = "bold"),
      legend.position = "bottom"
    )
}


plots <- map2(variables, y_titles, crear_grafico)


p1 <- print(plots[[1]])  
p2 <- print(plots[[2]])

library(cowplot)
combined_plot <- plot_grid(p1,p2, labels = c("A", "B"), ncol=1)

ggsave("Figs/richness_plots.png", combined_plot, width = 7, height = 8, dpi = 300, bg="white")


####seguimos uniendo medidas de network a fruitset
ntw_fruits <- sitems.fs %>%
  left_join(sitems, by = c("Year","Site","Bosque","Periodo"))

sitems <- ntw_fruits  
sitems$Year<-as.factor(sitems$Year)
sitems$Bosque<-as.character(sitems$Bosque)

glimpse(sitems)

sitems_rescaled <- sitems %>%
  mutate(Anidamiento = scale(Anidamiento),
         comp.fun.pol = scale(comp.fun.pol), 
         total.visits = scale(total.visits),
         poll.sp = scale(poll.sp),
         plant.sp = scale(plant.sp))

sitems.fs <- sitems_rescaled %>%
  filter(!is.na(mean_fruitset)& !is.nan(mean_fruitset))
sitems.fs <- sitems.fs %>%
  mutate(mean_fruitset = if_else(mean_fruitset == 1.00, 0.9999, mean_fruitset))

sitems.fs <- sitems.fs %>%
  mutate(mean_fruitset = if_else(mean_fruitset == 0, 0.000001, mean_fruitset))




```

```{r repro}
#| warning: false
#| message: false

sitems.fs.g <- sitems.fs %>%
  filter(Site =="Gorbea")
sitems.fs.d <- sitems.fs %>%
  filter(Site =="Doñana")

sitems.fs.g$Bosque <- as.factor(sitems.fs.g$Bosque)
sitems.fs.d$Bosque <- as.factor(sitems.fs.d$Bosque)

library(nlme)
library(glmmTMB)

library(performance)
library(nlme)
m5_lme <- lme(
  fruit_set ~ poll.sp + plant.sp + Anidamiento + comp.fun.pol + total.visits + Periodo,  
  random = list( ~ 1 | Bosque, ~ 1 | Year),
  correlation = corAR1(form = ~ Periodo | Bosque),  # Correlación AR(1) por Bosque
  method = "ML",
  data = sitems.fs.g
)
check_collinearity(m5_lme)


model_glmmTMB.g <- glmmTMB(
  mean_fruitset ~ poll.sp + plant.sp + Anidamiento + comp.fun.pol + total.visits  + Periodo + (1 | Bosque) + (1 | Year),
  family = "beta_family",
  data = sitems.fs.g
)

check_collinearity(model_glmmTMB.g)


model_glmmTMB.g.com<- glmmTMB(
  mean.fs ~ poll.sp + plant.sp + Anidamiento + comp.fun.pol + Periodo + (1 | Bosque) + (1 | Year),
  family = "beta_family",
  data = sitems.fs.g
)


model_glmmTMB.d <- glmmTMB(
  mean.fs ~ poll.sp + plant.sp + Anidamiento + comp.fun.pol +  Periodo + (1 | Bosque),
  family = "beta_family",
  data = sitems.fs.d
)


model_glmmTMB.int <- glmmTMB(
  mean.fs ~ (poll.sp + plant.sp + Anidamiento + comp.fun.pol) *  Periodo + Year + (1 | Bosque),
  family = "beta_family",
  data = sitems.fs.g
)
summary(model_glmmTMB.int)



model_glmmTMB.gint1 <- glmmTMB(
  mean.fs ~ (poll.sp + plant.sp + Anidamiento + total.visits) * Periodo * Year + (1 | Bosque) ,
  family = beta_family(),
  data = sitems.fs.g
)


model_glmmTMB.dint <- glmmTMB(
  mean.fs ~ (poll.sp + plant.sp + Anidamiento + comp.fun.pol) * Periodo + (1 | Bosque) ,
  family = beta_family(),
  data = sitems.fs.d
)


model_glmmTMB.dint1 <- glmmTMB(
  mean.fs ~ (poll.sp + plant.sp + Anidamiento + tot.visits) * Periodo + (1 | Bosque) ,
  family = beta_family(),
  data = sitems.fs.d
)






```

```{r fomulak}
#| warning: false
#| message: false


model_comparison <- data.frame(
 Model = c("glmmTMB.g", "glmmTMB.g.cv", "glmmTMB.d","glmmTMB.d.cv", "glmmTMB.int", "glmmTMB.gint1", "glmmTMB.dint", "glmmTMB.dint1"),
  AIC = c(AIC(model_glmmTMB.g.com), AIC(model_glmmTMB.g.cv),AIC(model_glmmTMB.d), AIC(model_glmmTMB.d.cv),AIC(model_glmmTMB.int), AIC(model_glmmTMB.gint1),AIC(model_glmmTMB.dint),AIC(model_glmmTMB.dint1)),
  BIC = c(BIC(model_glmmTMB.g.com),BIC(model_glmmTMB.g.cv),BIC(model_glmmTMB.d), BIC(model_glmmTMB.d.cv),BIC(model_glmmTMB.int), BIC(model_glmmTMB.gint1), BIC(model_glmmTMB.dint), BIC(model_glmmTMB.dint1)))

# Mostrar comparación de AIC y BIC
print(model_comparison)
par(mfrow = c(2, 2))
plot(resid(model_glmmTMB.gint1) ~ fitted(model_glmmTMB.gint1),
     main = "Residuos glmmTMB",
     xlab = "Valores ajustados",
     ylab = "Residuos")
qqnorm(resid(model_glmmTMB.gint1))

# Histograma de residuos
hist(resid(model_glmmTMB.g), main = "Histograma de residuos glmmTMB", xlab = "Residuos")

par(mfrow = c(2, 2))
plot(resid(model_glmmTMB.int) ~ fitted(model_glmmTMB.int),
     main = "Residuos glmmTMB",
     xlab = "Valores ajustados",
     ylab = "Residuos")
qqnorm(resid(model_glmmTMB.int))
# Histograma de residuos
hist(resid(model_glmmTMB.int), main = "Histograma de residuos glmmTMB", xlab = "Residuos")



###GLMMTMB MODELOA ASKOZE HOBEA CON BETA FAMILY

# List of model formulas for fruit set
formulas <- list(
  m6 = mean_fruitset ~ (poll.sp + plant.sp + Anidamiento + comp.fun.pol ) *  Periodo + Year + (1 | Bosque),
  m7 = mean_fruitset ~ (poll.sp + plant.sp + Anidamiento +  total.visits) *  Periodo + Year + (1 | Bosque),
  m8= mean_fruitset ~ (poll.sp + plant.sp) *  Periodo + Year + (1 | Bosque))


models.g <- map(formulas, ~ glmmTMB(.x, family = "beta_family", data = sitems.fs.g))
check_collinearity(models.g$m6)
summary(models.g$m7)

formulas.d <- list(
  m6 = mean_fruitset ~ (poll.sp + plant.sp + Anidamiento +  comp.fun.pol) *  Periodo + (1 | Bosque),
  m7 = mean_fruitset ~ (poll.sp + plant.sp + Anidamiento +  total.visits) * Periodo  + (1 | Bosque),
  m8 = mean_fruitset ~ (poll.sp + plant.sp) * Periodo  + (1 | Bosque)
)

models.d <- map(formulas.d, ~ glmmTMB(.x, family = "beta_family", data = sitems.fs.d))

sitems.fs.d.sub<-subset(sitems.fs.d, sitems.fs.d$comp.fun.pol<2)
str(sitems.fs.d.sub)

models.d.sub <- map(formulas.d, ~ glmmTMB(.x, family = "beta_family", data = sitems.fs.d.sub))

aic_results <- map(models.g, AIC)
print(aic_results)
aic_results <- map(models.d, AIC)
print(aic_results)
aic_results <- map(models.d.sub, AIC)
print(aic_results)

nrow(model.frame(models.g$m6))
nrow(model.frame(models.g$m7))
nrow(model.frame(models.g$m8))


nrow(model.frame(models.d.sub.sn$m6))
nrow(model.frame(models.d.sub.sn$m7))
nrow(model.frame(models.d.sub$m8))

model_table <- data.frame(
  Model = c("M1", "M2", "M3"),
  Formula = c(
    "(poll.sp + plant.sp + Nestedness + comp.fun.pol) * Period + Year + (1 | Site)",
    "(poll.sp + plant.sp + Nestedness + total.visits) * Period + Year + (1 | Site)",
    "(poll.sp + plant.sp) * Period + Year + (1 | Site)"
  ),
  `Fixed Effects` = c(
    "Pollinator and plant species richness, nestedness,pollinator functional complementarity, sampling period, year",
    "Pollinator and plant species richness, nestedness, total visits, sampling period, year",
    "Pollinator and plant species richness, sampling period, year"
  ),
  `Response Variables` = rep("fruit set / seed set", 3),
  `No..of.Networks` = c(
    md("29 / 26 (Gorbea)  \n31 / 31 (Doñana)"),  
    md("29 / 26 (Gorbea)  \n31 / 31 (Doñana)"),
    md("36 / 32 (Gorbea)  \n31 / 31 (Doñana)")
  ),
  `AIC..fruit.set.` = c(
    "-26.82 (Gorbea)     -22.83 (Doñana)",  # Igual para el AIC
    "-29.04 (Gorbea)     -22.98 (Doñana)",
    "-37.75 (Gorbea)     -26.77 (Doñana)"
  ),
  `AIC (seed set)` = c(
    "84.18 (Gorbea)  83.67 (Doñana)",  # AIC Seed Set (Gorbea vs Doñana)
    "82.81 (Gorbea)  86.73 (Doñana)",
    "91.10 (Gorbea)  83.03 (Doñana)"), #
  `Data Requirements` = c(
    "Full network metrics available",
    "Full network metrics available",
    "Richness available even if network structure is incomplete"
  )
)

install.packages("gt")
library(gt)
names(model_table)

model_table_clean <- model_table %>%
  mutate(`AIC..fruit.set.` = md(`AIC..fruit.set.`)) %>%
  gt() %>%
  
  # Primero, ajustamos el ancho de las columnas
  cols_width(
  Model ~ px(40),
  Formula ~ px(180),
  Fixed.Effects ~ px(180),
  Response.Variables ~ px(90),
  No..of.Networks ~ px(40),
  AIC..fruit.set. ~ px(70),
  AIC..seed.set. ~ px(70),
  Data.Requirements ~ px(120)
) %>%
  # Luego, cambiamos los nombres de las columnas
  cols_label(
    Model = "Model",
    Formula = "Formula",
    Fixed.Effects = "Fixed Effects",
    Response.Variables = "Response Variables",
    No..of.Networks = "No. of Networks",
    AIC..fruit.set. = md("*AIC* Fruit Set"),
    AIC..seed.set. = md("*AIC* Seed Set"),
    Data.Requirements = "Data Requirements"
  ) %>%
  tab_spanner(
  label = md("**AIC* Models*"),
  columns = c("AIC..fruit.set.", "AIC..seed.set.")
 )%>%
  tab_header(
    title = md("**Summary of fruit/seed set models at community level**")
  ) %>%
  tab_options(
    table.width = px(900),
    table.font.size = 10,
    heading.align = "left",
    column_labels.font.weight = "bold",
    table.align = "center"
  ) %>%
  opt_table_outline() %>%
  opt_row_striping()

# Para guardar como PNG (necesita paquete webshot o webshot2 instalado)
gtsave(model_table_clean, "Figs/model_summary_table.png", zoom = 2)
gtsave(model_table_clean, "Figs/model_summary_table.png", height = 600, width = 1000)
```

**Tabla modelos estructura funcion**

```{r tables}
#| warning: false
#| message: false
library(gridExtra)
library(grid)
install.packages("kableExtra")
library(kableExtra)

# Extraer estimates, std.error y z value para modelos de Gorbea (modelos 2 y 3)
resultados_d <- map_dfr(models.d, ~ {
  coef_summary <- summary(.x)$coefficients$cond
  tibble::as_tibble(coef_summary, rownames = "term") %>%
    mutate(modelo = deparse(substitute(.x)), Region = "Doñana")
}, .id = "modelo_d")

resultados_d.sub <- map_dfr(models.d.sub, ~ {
  coef_summary <- summary(.x)$coefficients$cond
  tibble::as_tibble(coef_summary, rownames = "term") %>%
    mutate(modelo = deparse(substitute(.x)), Region = "Doñana", Measure = "Fruit set")
}, .id = "modelo.d.sub")


resultados_g <- map_dfr(models.g, ~ {
  coef_summary <- summary(.x)$coefficients$cond
  tibble::as_tibble(coef_summary, rownames = "term") %>%
    mutate(modelo = deparse(substitute(.x)), Region = "Gorbea", Measure = "Fruit set")
}, .id = "modelo_g")

resultados_d <- resultados_d %>%
  select( Region,model= modelo_d, term, Estimate = Estimate, `Std. Error` = `Std. Error`, `Z value` = `z value`, `p value`= `Pr(>|z|)`)

resultados_d.sub<- resultados_d.sub %>%
  select( Region, Measure, model= modelo.d.sub, term, Estimate = Estimate, `Std. Error` = `Std. Error`, `Z value` = `z value`, `p value`= `Pr(>|z|)`)

resultados_g <- resultados_g %>%
  select(Region, Measure, model= modelo_g, term, Estimate = Estimate, `Std. Error` = `Std. Error`, `Z value` = `z value`,  `p value`= `Pr(>|z|)`)

library(kableExtra)
# Combinar los resultados en una sola tabla
tabla_final <- bind_rows(resultados_d.sub, resultados_g)

tabla_final_df <- as.data.frame(tabla_final)
tabla_final_df <- tabla_final_df %>%
  mutate(negrita =`p value` < 0.05) 
# Crear una tabla con desplazamiento horizontal
tabla_kable <- tabla_final_df %>%
  select(-negrita) %>% 
  kable("html") %>%
  kable_styling("striped", full_width = FALSE) %>%
  row_spec(0, bold = TRUE, color = "white", background = "#0073e6") %>% # Estilo del encabezado
  column_spec(1:5, border_left = TRUE) # Estilo de columnas

# Aplicar estilo de negrita para las filas con p < 0.05
for (i in which(tabla_final_df$negrita)) {
  tabla_kable <- tabla_kable %>% row_spec(i, bold = TRUE, color = "black")
}

# Mostrar la tabla
tabla_kable


tabla_fixed <- as.data.frame(tabla_final, stringsAsFactors = FALSE)
str(tabla_fixed)

gt_table <- gt(tabla_fixed)

install.packages("gt")
library(gt)
tabla_gt <- tabla_final %>%
  gt() %>%
  tab_header(title = "Model results") %>%
  fmt_number(
    columns = c(Estimate, `Std. Error`, `Z value`, `p value`),
    decimals = 3
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(rows = `p value` < 0.05)
  ) %>%
  tab_style(
    style = cell_fill(color = "#D3D3D3"),  # Gris oscuro
    locations = cells_body(rows = (`p value` >= 0.05 & `p value` <= 0.07))
  )
n_m6 <- nobs(models.g$m7)
# Guardar como PNG
gtsave(tabla_gt, filename = "Figs/tabla_finalm8_ntwfs.png", expand = 20)


##VARIABLE significativa gorbea
library(Polychrome)
library(RColorBrewer)
library(ggpubr)
colors<-get_palette("npg",16)

predicciones <- ggpredict(models.g$m7, terms = c("total.visits", "Periodo"))
predicciones

sitems.fs.g$Periodo <- as.factor(sitems.fs.g$Periodo) 

plot1 <-  ggplot(sitems.fs.g, aes(x = total.visits, y = mean_fruitset)) +
    geom_point(aes(color = Periodo),position = position_jitter(width = 0.1, height = 0.1), alpha=0.8, size=2.2) +
    geom_line(data = predicciones, aes(x = x, y = predicted, color= group), linewidth = 1.2) +
    labs(
      x = "Total visits",
      y = "Fruit set",
      title = "Gorbea"
    ) +
    theme_bw()+
   theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.title = element_text(size = 12))+
     scale_color_manual(values = colors, name="Period")+
     scale_fill_manual(values = colors, name="Period")+
     theme(legend.position = "bottom")

get_only_legend <- function(plot) { 
  plot_table <- ggplot_gtable(ggplot_build(plot)) 
  legend_plot <- which(sapply(plot_table$grobs, function(x) x$name) == "guide-box") 
  legend <- plot_table$grobs[[legend_plot]] 
  return(legend) 
} 

# extract legend from plot1 using above function 
legend <- get_only_legend(plot1 + theme(legend.direction = "horizontal", legend.position = "bottom"))

plot1 <- plot1 + 
  theme(legend.position = "none")
```

Mismos modelos para seed number

```{r seed number}
#| warning: false
#| message: false

###models for seed number
sitems.sn <- sitems3 %>%
  group_by(Year, Bosque, Site, Periodo) %>%
  summarise(mean_sn = mean(Semillas_viables, na.rm = TRUE),
            se_sn = (sd(Semillas_viables, na.rm = TRUE))/sqrt(n()))

sitems.sn <- sitems.sn %>%
  mutate(scaled_mean.sn = scale(mean_sn),
         scaled_se.en = scale(se_sn))

sitems3 <- sitems3 %>%
  group_by(Year, Bosque, Site, Periodo) %>%
  summarise(Anidamiento = unique(Anidamiento),
            poll.sp = unique(poll.sp),
            plant.sp = unique(plant.sp),
            total.visits = unique(total.visits),
            comp.fun.pol = unique (comp.fun.pol))



ntw_sn <- sitems.sn %>%
  left_join(sitems3, by = c("Year","Site","Bosque","Periodo"))

sitems3 <- ntw_sn 


sitems3_rescaled <- sitems3 %>%
  mutate(Anidamiento = scale(Anidamiento),
         comp.fun.pol = scale(comp.fun.pol), 
         total.visits = scale(total.visits),
         poll.sp = scale(poll.sp),
         plant.sp = scale(plant.sp))

sitems3_rescaled <- sitems3_rescaled %>%
  filter(!is.na(mean_sn)& !is.nan(mean_sn))

sitems.sn.g <- sitems3_rescaled %>%
  filter(Site =="Gorbea")
sitems.sn.d <- sitems3_rescaled %>%
  filter(Site =="Doñana")

sitems.sn.g$Bosque <- as.factor(sitems.sn.g$Bosque)
sitems.sn.d$Bosque <- as.factor(sitems.sn.d$Bosque)

formulas.sn <- list(
  m6 = scaled_mean.sn ~ (poll.sp + plant.sp + Anidamiento + comp.fun.pol) *  Periodo + Year,
  m7 = scaled_mean.sn ~ (poll.sp + plant.sp + Anidamiento + total.visits) *  Periodo + Year ,
  m8 = scaled_mean.sn ~ (poll.sp + plant.sp) *  Periodo + Year 
  
)

####HAY SMEILLAS QUE NO TIENNE INFO DE LA RED DEL MOMENTO PORQUE EN ESE MOMENTO NO INTERACCIONARIA ESA PLANTA.
colSums(is.na(sitems.sn.g))

models.g.sn <- map(formulas.sn, ~ glmmTMB(.x, family = "gaussian", data = sitems.sn.g))

summary(models.g.sn$m7)

formulas.d.sn <- list(
  m6 = scaled_mean.sn ~ (poll.sp + plant.sp + Anidamiento + comp.fun.pol ) *  Periodo + (1 | Bosque),
  m7 = scaled_mean.sn ~ (poll.sp + plant.sp + Anidamiento + total.visits ) * Periodo  + (1 | Bosque),
  m8 = scaled_mean.sn ~ (poll.sp + plant.sp) * Periodo  + (1 | Bosque)
)

models.d.sn <- map(formulas.d.sn, ~ glmmTMB(.x, family = "gaussian", data = sitems.sn.d))

sitems.sn.d.sub<-subset(sitems.sn.d, sitems.sn.d$comp.fun.pol<2)
str(sitems.fs.d.sub)

models.d.sub.sn <- map(formulas.d.sn, ~ glmmTMB(.x, family = "gaussian", data = sitems.sn.d.sub))

n_m6 <- nobs(models.d$m7)
summary(models.d.sub.sn$m7)
n_m8 <- nrow(model.frame(models.d.sub.sn$m7)) 
n_m8
n_m7<- nrow(model.frame(models.g$m7)) 
n_m7

aic_results <- map(models.g.sn, AIC)
print(aic_results)
aic_results <- map(models.d.sn, AIC)
print(aic_results)
aic_results <- map(models.d.sub.sn, AIC)
print(aic_results)

###tabla
resultados_dsn <- map_dfr(models.d.sn, ~ {
  coef_summary <- summary(.x)$coefficients$cond
  tibble::as_tibble(coef_summary, rownames = "term") %>%
    mutate(modelo = deparse(substitute(.x)), Region = "Doñana")
}, .id = "modelo_d")

resultados_d.sub.sn <- map_dfr(models.d.sub.sn, ~ {
  coef_summary <- summary(.x)$coefficients$cond
  tibble::as_tibble(coef_summary, rownames = "term") %>%
    mutate(modelo = deparse(substitute(.x)), Region = "Doñana", Measure = "Seed number")
}, .id = "modelo.d.sub")

# Extraer estimates, std.error y z value para modelos de Gorbea (modelos 2 y 3)
resultados_gsn <- map_dfr(models.g.sn, ~ {
  coef_summary <- summary(.x)$coefficients$cond
  tibble::as_tibble(coef_summary, rownames = "term") %>%
    mutate(modelo = deparse(substitute(.x)), Region = "Gorbea", Measure = "Seed number")
}, .id = "modelo.g")

resultados_dsn <- resultados_dsn %>%
  select( Region, model= modelo_d, term, Estimate = Estimate, `Std. Error` = `Std. Error`, `Z value` = `z value`, `p value`= `Pr(>|z|)`)

resultados_d.sub.sn<- resultados_d.sub.sn %>%
  select( Region, Measure, model= modelo.d.sub, term, Estimate = Estimate, `Std. Error` = `Std. Error`, `Z value` = `z value`, `p value`= `Pr(>|z|)`)

resultados_gsn <- resultados_gsn %>%
  select(Region, ,Measure, model= modelo.g, term, Estimate = Estimate, `Std. Error` = `Std. Error`, `Z value` = `z value`,  `p value`= `Pr(>|z|)`)


library(kableExtra)
# Combinar los resultados en una sola tabla
tabla_finalsn <- bind_rows(resultados_d.sub.sn,resultados_gsn)

tabla_final_df <- as.data.frame(tabla_finalsn)
tabla_final_df <- tabla_final_df %>%
  mutate(negrita =`p value` < 0.05) 
# Crear una tabla con desplazamiento horizontal
tabla_kable <- tabla_final_df %>%
  select(-negrita) %>% 
  kable("html") %>%
  kable_styling("striped", full_width = FALSE) %>%
  row_spec(0, bold = TRUE, color = "white", background = "#0073e6") %>% # Estilo del encabezado
  column_spec(1:5, border_left = TRUE) # Estilo de columnas

# Aplicar estilo de negrita para las filas con p < 0.05
for (i in which(tabla_final_df$negrita)) {
  tabla_kable <- tabla_kable %>% row_spec(i, bold = TRUE, color = "black")
}

# Mostrar la tabla
tabla_kable



library(gt)
tabla_gt <- tabla_finalsn %>%
  gt() %>%
  tab_header(title = "Model results") %>%
  fmt_number(
    columns = c(Estimate, `Std. Error`, `Z value`, `p value`),
    decimals = 3
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(rows = `p value` < 0.05)
  ) %>%
  tab_style(
    style = cell_fill(color = "#D3D3D3"),  # Gris oscuro
    locations = cells_body(rows = (`p value` >= 0.05 & `p value` <= 0.08))
  )
n_m6 <- nobs(models.d.sn$m8)
n_m6
# Guardar como PNG
gtsave(tabla_gt, filename = "Figs/tabla_finalm8_ntwsn.png", expand = 20)
```

p.sn

```{r interaction_plots}
#| warning: false
#| message: false

##VARIABLE significativa gorbea
predicciones <- ggpredict(models.g.sn$m7, terms = c("plant.sp"))
predicciones

plot <-  ggplot(sitems.sn.g, aes(x = plant.sp, y = scaled_mean.sn)) +
    geom_point(position = position_jitter(width = 0.1, height = 0.1), color= "#069", alpha=0.6, size=0.8)+
    geom_ribbon(data = predicciones, aes(x = x, ymin = conf.low, ymax = conf.high),
                fill = "#E07A5F", alpha = 0.1, inherit.aes = FALSE) +
    geom_line(data = predicciones, aes(x = x, y = predicted), color = "#E07A5F", linewidth = 1.2) +
    labs(
      x = "Plant richness",
      y = "Seed number",
      title = "Gorbea"
    ) +
    theme_bw()+
   theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.title = element_text(size = 12))


sitems.sn.d$Periodo <- as.factor(sitems.sn.d$Periodo)
sitems.fs.d$Periodo <- as.factor(sitems.fs.d$Periodo)

p.fs <- ggplot(sitems.fs.d, aes(x = Periodo, y = mean_fruitset)) +
  geom_boxplot(color = "#3C5488B2", outlier.colour = "#F39B7FB2", outlier.size = 2) + 
  geom_jitter(color = "#8491B4FF",
              position = position_jitter(width = 0.1, height = 0.1)) +
  labs(
    title = "Doñana",
    x = "Sampling period",
    y = "Fruit set"
  ) +
  theme_bw() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.title = element_text(size = 12)
  )

p.sn <- ggplot(sitems.sn.d, aes(x = Periodo, y = scaled_mean.sn)) +
  geom_boxplot(color = "#3C5488B2", outlier.colour = "#F39B7FB2", outlier.size = 2) + 
  geom_jitter(color = "#8491B4FF",
              position = position_jitter(width = 0.1, height = 0.1)) +
  labs(
    title = "Doñana",
    x = "Sampling period",
    y = "Seed set"
  ) +
  theme_bw() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.title = element_text(size = 12)
  )

p.sn

plot.rep <- plot_grid (
  p.fs, p.sn, labels = c("A", "B"),
  label_size = 12, ncol=2
)

gorbea <- plot_grid(plot1, legend, labels = c("C"), label_size = 12, ncol= 2, rel_heights = c(1,0.25))

comm.rep <- plot_grid (plot.rep, gorbea, ncol=1)

ggsave("Figs/comm.repro_en.png", comm.rep, dpi=300, width=10, height = 6, bg= "white") 
```

coefs

```{r cv}
###
library(here)
all_df <- read.csv("./data/useful/all_data.csv")
fs <- read.csv(here("data", "total_fruits.csv"))
seeds <- read.csv(here("data", "total_seeds.csv"))
sitems <- read.csv("data/SITE_network_level_metrics.csv", sep=",")

fs <- fs %>%
  group_by(Site, Year, Bosque) %>%
  summarize(
    Media = mean(fruit_set, na.rm = TRUE),
    Desviacion = sd(fruit_set, na.rm = TRUE),
    CV = (Desviacion / Media)  
  )


year_data <- all_df %>%
  group_by(Site, Year, Bosque)%>%
  summarise(poll.sp = n_distinct(Pollinator_id),
            plant.sp = n_distinct(Planta),
            total.visits = n())

years_info <- fs %>%
  left_join(year_data, by=c("Site","Year","Bosque"))

sitems_cv <- sitems %>%
  group_by(Site_id, Year, Bosque) %>%
  summarise(
    Media_ani = mean(Anidamiento, na.rm = TRUE),
    Desviacion_ani = sd(Anidamiento, na.rm = TRUE),
    CV_nest = (Desviacion_ani / Media_ani),
    Media_func = mean(comp.fun.pol, na.rm = TRUE),
    Desviacion_func = sd(comp.fun.pol, na.rm = TRUE),
    CV_func = (Desviacion_func / Media_func) 
  )



sitems_cv <- sitems_cv %>%
  rename(Site = Site_id)

years_info <- years_info %>%
  left_join(sitems_cv, select(c("Site","Year","Bosque","CV_nest")),
            by=c("Site", "Year", "Bosque"))



years_info <- years_info %>%
  mutate(total.visits = scale(total.visits),
         poll.sp = scale(poll.sp),
         plant.sp = scale (plant.sp))

range(years_info$CV)

years.g <- years_info %>%
  filter(Site=="Gorbea")

years.d <- years_info %>%
  filter(Site=="Doñana")



model <- lm(1/CV ~ total.visits + poll.sp + plant.sp + CV_nest + CV_func, data = years.g)
summary(model)

# Calculate Variance Inflation Factors (VIF) to assess multicollinearity

vif_values <- vif(model)
cat("VIF values:\n")
print(vif_values)
check_collinearity(model)
###alta colinearidad CV nest y comp funcional --> correremos dos modelos separados

library(glmmTMB)

modelo.n <- glmmTMB(1/CV ~ total.visits + poll.sp + plant.sp + CV_nest  +  (1|Bosque), data = years.g, na.action = na.exclude, family = "gaussian" )
summary(modelo.n)
check_collinearity(modelo.n)


modelo.fun <- glmmTMB(1/CV ~ total.visits + poll.sp + plant.sp + CV_func   +  (1|Bosque), data = years.g, na.action = na.exclude, family = "gaussian" )

summary(modelo.fun)
check_collinearity(modelo.fun)

# Extraer los coeficientes del modelo
coefs <- fixef(modelo.n)$cond
intercept <- coefs["(Intercept)"]  # Intercepto
slope_CVnest <- coefs["CV_nest"]  

#### VARIABILIDAD EN EL ANIDAMIENTO AUMENTA ESTABILIDAD DE EXITO REPRODUCTIVO.
min_x <- min(years.g$CV_nest)
max_x <- max(years.g$CV_nest)


plot <- ggplot(years.g, aes(x = CV_nest, y = 1/CV)) +
  geom_point(position = position_jitter(width = 0.01, height = 0.01), color = "#2A9D8F", alpha = 0.9, size = 2.7) +
  geom_abline(intercept = intercept, slope = slope_CVnest, color = "#4A6FA5", linewidth = 1.2, alpha = 0.8) +  # Añadir la línea de regresión
  labs(
    x = "CV nestedness",
    y = "Fruit set stability"
  ) +
  theme_bw() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.title = element_text(size = 12)
  ) +
  xlim(0.2, 0.9) +   # Ajustar los límites del eje x manualmente
  ylim(0, 7)

p1 <- plot + theme(panel.grid.minor = element_blank())

# Extraer los coeficientes del modelo
coefs <- fixef(modelo.fun)$cond
intercept <- coefs["(Intercept)"]  # Intercepto
slope_CVfun <- coefs["CV_func"]  

#### VARIABILIDAD EN EL ANIDAMIENTO AUMENTA ESTABILIDAD DE EXITO REPRODUCTIVO.
min_x <- min(years.g$CV_func)
max_x <- max(years.g$CV_func)

plot.2 <- ggplot(years.g, aes(x = CV_func, y = 1/CV)) +
  geom_point(position = position_jitter(width = 0.01, height = 0.01), color = "#2A9D8F", alpha = 0.9, size = 2.7) +
  geom_abline(intercept = intercept, slope = slope_CVfun, color = "#4A6FA5", linewidth = 1.2, alpha = 0.8) +  # Añadir la línea de regresión 
  labs(
    x = "CV Pollinator func. complementarity",
    y = "Fruit set stability")+
  theme_bw() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.title = element_text(size = 12)
  ) +
  xlim(0.2, 0.9) +   # Ajustar los límites del eje x manualmente
  ylim(0, 7)

p2 <- plot.2 + theme(panel.grid.minor = element_blank())


stability <- plot_grid(
  p1,p2, labels = c("A", "B")
)
titulo <- ggdraw() +
  draw_label(
    "Gorbea",
    fontface = 'bold',
    x = 0.5, 
    hjust = 0.5,
    size = 16  
  )
p.s <- plot_grid(
  titulo, stability, ncol=1, rel_heights = c(0.1, 1)
)
ggsave("Figs/stability.png", p.s, dpi=300, width=7, height = 3, bg= "white") 

###repetimos para seed number

seeds <- seeds %>%
  group_by(Site, Year, Bosque) %>%
  summarize(
    Media = mean(Semillas_viables, na.rm = TRUE),
    Desviacion = sd(Semillas_viables, na.rm = TRUE),
    CV = (Desviacion / Media)
  )

years_seeds <- seeds %>%
  left_join(year_data, by=c("Site","Year","Bosque"))


years_seeds <- years_seeds %>%
  left_join(sitems_cv, select(c("Site","Year","Bosque","CV_nest")),
            by=c("Site", "Year", "Bosque"))


years_seeds <- years_seeds %>%
  mutate(total.visits = scale(total.visits),
         poll.sp = scale(poll.sp),
         plant.sp = scale (plant.sp))

range(years_seeds$CV)

years.g.sn <- years_seeds %>%
  filter(Site=="Gorbea")

library(lmerTest)

modelo.n <- glmmTMB(1/CV ~ total.visits + poll.sp + plant.sp + CV_nest  +  (1|Bosque), data = years.g.sn, na.action = na.exclude, family = "gaussian" )
summary(modelo.fun)
check_collinearity(modelo.n)


modelo.fun <- glmmTMB(1/CV ~ total.visits + poll.sp + plant.sp + CV_func   +  (1|Bosque), data = years.g.sn, na.action = na.exclude, family = "gaussian" )




```

```{r cv_compl}
comp <- sitems_rescaled %>%
  group_by(Site_id, Year, Bosque) %>%
  summarize(
    Media = mean(comp.fun.pol, na.rm = TRUE),
    Desviacion = sd(comp.fun.pol, na.rm = TRUE),
    CV = (Desviacion / Media) )

comp$Year <- as.factor(comp$Year)

p1 <- ggplot(comp, aes(x = Bosque, y = CV, color = Year)) +
  geom_point() +
  geom_line() +
  facet_wrap(~ Site_id, scales = "free_x", labeller = label_wrap_gen(multi_line = FALSE)) +
  labs(title = "Pollinator complementarity CV",
       x = "Sampling site",
       y = "Coefficient of Variation (%)") +
  theme_minimal() +
  scale_color_npg() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

p1

mean_fs_data <- sitems_rescaled %>%
  group_by(Site_id, Year, Bosque) %>%
  summarize(mean_fs = mean(mean.fs, na.rm = TRUE),
            .groups = 'drop')

comp_expanded <- comp %>%
  left_join(mean_fs_data, by = c("Site_id", "Year", "Bosque"))

comp_final <- comp_expanded %>%
  filter(Year != 2020)



modelo <- lmer(mean_fs ~ CV + (1|Site_id), data = comp_final)
resumen <- summary(modelo)
print(resumen)
anova(modelo, ddf = "Kenward-Roger")

modelo_nulo <- lmer(mean_fs ~ 1 + (1|Site_id), data = comp_final)
anova(modelo_nulo, modelo)
###NO PODEMOS RECHAZAR HIPOTESIS NULA, DE QUE NO HAY RELACION ENTRE CV DEL NESTEDNESS Y MEAN FRUITSET. 
##pendiente de la linea: 0.0031, p value 0.59

```

```{r cv_nest}
hinojos <- sitems_rescaled %>%
  filter(Bosque == "Pinar Hinojos" & Year==2021) %>%
  summarize(
    Media.nest = mean(Anidamiento, na.rm = TRUE),
    Desviacion.nest = sd(Anidamiento, na.rm = TRUE),
    CV.mest = (Desviacion.nest / Media.nest),
    Media.comp = mean(comp.fun.pol, na.rm = TRUE),
    Desviacion.comp = sd(comp.fun.pol, na.rm = TRUE),
    CV.comp = (Desviacion.comp / Media.comp))

nest <- sitems_rescaled %>%
  filter(!(Bosque == "Pinar Hinojos" & Year==2021))%>%
  group_by(Site_id, Year, Bosque) %>%
  summarize(
    Media = mean(Anidamiento, na.rm = TRUE),
    Desviacion = sd(Anidamiento, na.rm = TRUE),
    CV = (Desviacion / Media) )

nest$Year <- as.factor(nest$Year)

p1 <- ggplot(nest, aes(x = Bosque, y = CV, color = Year)) +
  geom_point() +
  geom_line() +
  facet_wrap(~ Site_id, scales = "free_x", labeller = label_wrap_gen(multi_line = FALSE)) +
  labs(title = "Nestednesss CV",
       x = "Sampling site",
       y = "Coefficient of Variation (%)") +
  theme_minimal() +
  scale_color_npg() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

p1


nest_expanded <- nest %>%
  left_join(mean_fs_data, by = c("Site_id", "Year", "Bosque"))

nest_final <- nest_expanded %>%
  filter(Year != 2020)


library(lmerTest)
modelo <- lmer(mean_fs ~ CV + (1|Site_id), data = nest_final)
resumen <- summary(modelo)
print(resumen)
anova(modelo, ddf = "Kenward-Roger")

modelo_nulo <- lmer(mean_fs ~ 1 + (1|Site_id), data = nest_final)
anova(modelo_nulo, modelo)
###NO PODEMOS RECHAZAR HIPOTESIS NULA, DE QUE NO HAY RELACION ENTRE CV DEL NESTEDNESS Y MEAN FRUITSET. 
##pendiente de la linea: -0.0032, p value 0.39

sitems.fs <- sitems.fs %>%
  group_by(Bosque, Year, Site_id) %>% 
  mutate(cv_nestedness = (sd(Anidamiento, na.rm = TRUE) / mean(Anidamiento, na.rm = TRUE)),
         cv_comp = (sd(comp.fun.pol, na.rm = TRUE) / mean (comp.fun.pol, na.rem = TRUE))) %>%
  ungroup()

sitems.fs.g <- sitems.fs %>%
  filter(Site_id=="Gorbea")
sitems.fs.d <- sitems.fs %>%
  filter(Site_id=="Doñana")

# Obtener las predicciones del modelo
predicciones <- ggpredict(modelo, terms = "CV")

# Crear el gráfico
p.cv_nest <- ggplot(nest_final, aes(x = CV, y = mean_fs)) +
  geom_point(alpha = 0.6, color="#069") +  
  geom_ribbon(data = predicciones, aes(x = x, ymin = conf.low, ymax = conf.high), 
              fill = "#DF8F4499", alpha = 0.2, inherit.aes = FALSE)+ 
  geom_line(data = predicciones, aes(x = x, y = predicted), color = "#DB5B06", linewidth=1.2) +   # Línea del modelo con intervalo de confianza
  labs(x = "Nestedness CV", y = "Mean Fruit Set",
       ) +
  annotate("text", 
           x = min(nest_final$CV, na.rm = TRUE) + 5,  
           y = max(nest_final$mean_fs, na.rm = TRUE) - 0.1,             label = "Estimate: 0.0013\np-value: 0.39", 
           hjust = 0, size = 4, color = "black") + 
  theme_minimal()

print(p.cv_nest)

library(cowplot)
combined_plot <- plot_grid(
  p.cv_nest + ggtitle("A"),  
  p.cv_comp + ggtitle("B"), 
  label_size = 12,  
  ncol = 2  
)


ggsave("Figs/cv_nest_comp.png", combined_plot, dpi=300, width=10, height = 6, bg= "white")
```

### Indices de estructura de la red

```{r plots}

library(ggplot2)
library(ggsci)
library(ggpubr)
library(purrr)

sitems <- read.csv("data/SITE_network_level_metrics.csv", sep=",")

sitems_rescaled <- sitems %>%
  mutate(Anidamiento = scale(Anidamiento),
         comp.fun.pol = scale(comp.fun.pol), 
        comp.fun.pl = scale(comp.fun.pl),
         poll.sp = scale(poll.sp),
         plant.sp = scale(plant.sp))

sitems_rescaled$Periodo <- as.integer(sitems_rescaled$Periodo)
sitems_rescaled$Year <- as.factor(sitems$Year)
# Filtrar los datasets
sitems.g <- sitems_rescaled %>% filter(Site_id == "Gorbea")
sitems.d <- sitems_rescaled %>% filter(Site_id == "Doñana")

str(sitems.g)

model_glmmTMB.g <- glmmTMB(
  Anidamiento ~ poll.sp + plant.sp + Periodo + (1 | Bosque) + (1 | Year),
  family = "gaussian",
  data = sitems.g
)


model_glmmTMB.g.int <- glmmTMB(
  Anidamiento ~ (poll.sp + plant.sp) * Periodo + (1 | Bosque) + (1 | Year),
  family = "gaussian",
  data = sitems.g
)
hist(sitems.g$Anidamiento)
summary(model_glmmTMB.g.int)

model_lme.g <- lme(
  Anidamiento ~ poll.sp + plant.sp,
  random = list( ~ 1 | Bosque, ~ 1 | Year),
  correlation = corAR1(form = ~ Periodo),
  data = sitems.g
)

model_glmmTMB.d <- glmmTMB(
  Anidamiento ~ poll.sp + plant.sp + Periodo + (1 | Bosque) + (1 | Year),
  family = "gaussian",
  data = sitems.d
)

model_lme.d <- lme(
  Anidamiento ~ poll.sp + plant.sp,
  random = list( ~ 1 | Bosque, ~ 1 | Year),
  correlation = corAR1(form = ~ Periodo),
  data = sitems.d
)



model_comparison1 <- data.frame(
  Model = c("glmmTMB", "model.int", "lme", "glm.d", "lme.d"),
  AIC = c(AIC(model_glmmTMB.g), AIC(model_glmmTMB.g.int), AIC(model_lme.g), AIC(model_glmmTMB.d), AIC(model_lme.d)),
  BIC = c(BIC(model_glmmTMB.g), BIC(model_glmmTMB.g.int), BIC(model_lme.g), BIC(model_glmmTMB.d), BIC(model_lme.d))
)

# Mostrar comparación de AIC y BIC
print(model_comparison1)

par(mfrow = c(2, 2))
plot(resid(model_glmmTMB) ~ fitted(model_glmmTMB),
     main = "Residuos glmmTMB",
     xlab = "Valores ajustados",
     ylab = "Residuos")
abline(h = 0, col = "red")
# Histograma de residuos
hist(resid(model_glmmTMB), main = "Histograma de residuos glmmTMB", xlab = "Residuos")

# Análisis de residuos para el modelo lme
plot(resid(model_lme) ~ fitted(model_lme),
     main = "Residuos lme",
     xlab = "Valores ajustados",
     ylab = "Residuos")
abline(h = 0, col = "red")

# Histograma de residuos
hist(resid(model_lme), main = "Histograma de residuos lme", xlab = "Residuos")
models.full <- map(formulas, ~ glmmTMB(.x, family = "beta_family", data = sitems.fs))




# Crear lista de datasets con nombres completos
datasets <- list(Gorbea = sitems.g, Doñana = sitems.d)
models <- list(
  Nestedness = Anidamiento ~ (poll.sp + plant.sp) * Periodo + Year + (1|Bosque),
  poll_compl = comp.fun.pol ~ (poll.sp + plant.sp) * Periodo + Year + (1|Bosque),
  plant_compl = comp.fun.pl ~ (poll.sp + plant.sp) * Periodo + Year + (1|Bosque) 
)

results <- function(data, formula) {
  model <- glmmTMB(formula, data = data, family = "gaussian")
  
  # Resumen del modelo
  model_summary <- summary(model)
  
  coef_table <- as.data.frame(model_summary$coefficients$cond)
  coef_table <- tibble::rownames_to_column(coef_table, var = "Term")

  return(coef_table)
}

# Usar map para calcular resultados
results_all <- map(models, ~ map(datasets, results, formula = .x))

# Función para extraer la información relevante de la lista
extract_data <- function(results_list) {
  extracted_data <- list()
  for (model_name in names(results_list)) {
    for (dataset_name in names(results_list[[model_name]])) {
      data <- results_list[[model_name]][[dataset_name]]
      data$Model <- model_name
      data$Dataset <- dataset_name
      extracted_data[[paste(model_name, dataset_name, sep = "_")]] <- data
    }
  }
  return(bind_rows(extracted_data))
}

# Usar la función para transformar la lista en un data frame
df_results <- extract_data(results_all)

library(gt)
tabla_gt <- df_results %>%
  gt() %>%
  tab_header(title = "Model results") %>%
  fmt_number(
    columns = c(Estimate, `Std. Error`, `z value`, `Pr(>|z|)`) ,
    decimals = 3
  ) %>%
   cols_label(   # Cambiar nombres de columnas si es necesario
    Estimate = "Estimate",
    `Std. Error` = "Std. Error",
    `z value` = "z value",
     `Pr(>|z|)` = "p value"
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(rows = `Pr(>|z|)` < 0.05)
  ) %>%
  tab_style(
    style = cell_fill(color = "#D3D3D3"),  # Gris claro
    locations = cells_body(rows = (`Pr(>|z|)` >= 0.05 & `Pr(>|z|)` <= 0.07))
  )

tabla_gt 
gtsave(tabla_gt, filename = "Figs/tabla_comm_time.png", expand = 20)


# Función para ajustar modelos y generar predicciones
predict_and_summarise <- function(data, formula) {
  model <- glmmTMB(formula, data = data, family = "gaussian")
  data$predicted <- predict(model, type = "response", re.form = NA)
  
  mean_predictions <- data %>%
    group_by(Year, Periodo) %>%
    summarise(mean_predicted = mean(predicted, na.rm = TRUE), .groups = 'drop')
  
  return(list(data = data, mean_predictions = mean_predictions))
}


# Función para crear gráficos
create_plot <- function(data, mean_predictions, y_variable, plot_title) {
  ggplot(data, aes(x = factor(Periodo), y = .data[[y_variable]])) +
    geom_point(aes(color = as.factor(Year)), alpha = 0.6) +
    geom_point(data = mean_predictions, aes(y = mean_predicted, color = Year),
               size = 2.5, shape = 21, fill = "#FFFFFF", alpha = 0.75, stroke = 1) +
    geom_line(data = mean_predictions, aes(y = mean_predicted, group = Year, color = Year),
              linewidth = 0.7, alpha = 0.75) +  # Usar linewidth en lugar de size
    scale_color_npg(labels = levels(as.factor(data$Year))) +
    theme_bw() +
    theme(panel.grid.major = element_blank(),
          panel.grid.minor = element_blank()) +
    labs(x = "Sampling period", 
         y = ifelse(y_variable == "Anidamiento", "Nestedness", 
                    ifelse(y_variable == "comp.fun.pl", "Functional Complementarity of Plants", 
                           "Pollinator funct. complementarity")), 
         color = "Year") +
    ggtitle(plot_title)
}

# Aplicar modelos y generar gráficos para cada combinación
results <- map(models, ~ map(datasets, predict_and_summarise, formula = .x))


plots <- map2(results, names(results), function(res, model_name) {
  map2(res, names(res), function(data_res, site_name) {
    y_variable <- ifelse(model_name == "Nestedness", "Anidamiento",
                  ifelse(model_name == "plant_compl", "comp.fun.pl", "comp.fun.pol"))
    create_plot(data_res$data, data_res$mean_predictions, y_variable, paste(site_name))
  })
})

# Mostrar gráficos
plots.print <- walk(plots, ~ walk(.x, print))

combine_plots <- function(plot1, plot2, labels = c("A", "B"), label_size = 13, nrow=1) {
  if (!is.null(plot1) && !is.null(plot2)) {
    plot_grid(plot1, plot2, labels = labels, label_size = label_size, nrow=nrow)
  } else {
    cat("Uno o ambos gráficos son NULL.\n")
    NULL
  }
}

nest.g <- plots[[1]][[1]] + theme(legend.position = "none")
nest.d <- plots[[1]][[2]] + theme(legend.position = "none")  

comp.fun.g <- plots[[2]][[1]]+ theme(legend.position = "none")
comp.fun.d <- plots[[2]][[2]]+ theme(legend.position = "none")

comp.funpl.g <- plots[[3]][[1]]+ theme(legend.position = "none")
comp.funpl.d <- plots[[3]][[2]]+ theme(legend.position = "none")



# Combina los gráficos
nest <- combine_plots(nest.d, nest.g, labels = c("A", "B"), label_size = 13)
ggsave2("Figs/indices/nest.png", nest, width = 9, height = 4)

comp <- combine_plots(comp.fun.d, comp.fun.g, labels = c("C", "D"), label_size = 13)

ind <- combine_plots(nest, comp, labels = c(NULL, NULL), label_size = 0, nrow=2 )

ggsave2("Figs/indices/ind.png", ind, width = 9, height = 7)


comp.pl <- combine_plots(comp.funpl.g, comp.funpl.d, labels = c("A", "B"), label_size = 13, nrow=1)
ggsave2("Figs/indices/comp.pl.png", comp.pl, width = 9, height = 4)


save(plots,file = "Rdata/indices.RData")

```

```{r bosque}
predict_bosque <- function(data, formula) {
  model <- glmmTMB(formula, data = data, family = "gaussian")
  data$predicted <- predict(model, type = "response", re.form = NA)
  
  mean_predictions <- data %>%
    group_by(Year, Periodo, Bosque) %>%
    summarise(mean_predicted = mean(predicted, na.rm = TRUE), .groups = 'drop')
  
  return(list(data = data, mean_predictions = mean_predictions))
}
sortu_plot <- function(data, mean_predictions, y_variable, plot_title) {
ggplot(data, aes_string(x = "factor(Periodo)", y = y_variable)) +
    geom_point(aes(color = as.factor(Year)), alpha = 0.6) +
    geom_point(data = mean_predictions, aes_string(y = "mean_predicted", color = "as.factor(Year)"),
               size = 2.5, shape = 21, fill = "#3C5488FF", alpha = 0.75) +
    geom_line(data = mean_predictions, aes_string(y = "mean_predicted", group = "Year", color = "as.factor(Year)"),
              size = 0.7, alpha = 0.75) +
    facet_wrap(~ Bosque) +  # Facetar por Bosque
    scale_color_npg() +
    theme_bw() +
    theme(panel.grid.major = element_blank(),
          panel.grid.minor = element_blank()) +
    labs(x = "Period", y = ifelse(y_variable == "Anidamiento", "Nestedness", 
                                   ifelse(y_variable == "comp.fun.pl", "Functional Complementarity of Plants", "Pollinator funct. complementarity")), 
         color = "Year") +
    ggtitle(plot_title)
}

# Aplicar modelos y generar gráficos para cada combinación
results <- map(models, ~ map(datasets, predict_bosque, formula = .x))

# Generar gráficos usando la información de `results`
plots <- map2(results, names(results), function(res, model_name) {
  map2(res, names(res), function(data_res, site_name) {
    y_variable <- ifelse(model_name == "anidamiento", "Anidamiento",
                  ifelse(model_name == "comp_pl", "comp.fun.pl", "comp.fun.pol"))
    sortu_plot(data_res$data, data_res$mean_predictions, y_variable, paste(site_name))
  })
})

# Mostrar gráficos
plots.print <-walk(plots, ~ walk(.x, print))



ggsave2("Figs/indices/nest.bosque.png", nest.bosque, width = 7, height = 6)

comp.g <- plots[[2]][[1]] + theme(legend.position = "bottom") 
comp.d <- plots[[2]][[2]] + theme(legend.position = "none") 
comp.bosque <- combine_plots(comp.g, comp.d, labels = c("A", "B"), label_size = 13, nrow=2)

ggsave2("Figs/indices/comp.pol.bosque.png", comp.bosque, width = 8, height = 7)

compl.g <- plots[[3]][[1]] + theme(legend.position = "bottom") 
compl.d <- plots[[3]][[2]] + theme(legend.position = "none") 
compl.bosque <- combine_plots(compl.g, compl.d, labels = c("A", "B"), label_size = 13, nrow=2)

ggsave2("Figs/indices/comp.pl.bosque.png", compl.bosque, width = 8, height = 7)




save(plots,file = "Rdata/indices_bosque.RData")
```
